{
  "time": 1615983725178,
  "blocks": [
    {
      "data": {
        "text": "<b>Краткое резюме</b>"
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Git являясь более современным инструментом для контроля версий, предоставляет более гибкие возможности для разработчиков и тимлидов для контроля над кодовой базой проекта."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Благодаря удобности Git и доверию специалистов его разработчику - Линусу Торвальдсу (также создатель Linux), эта система контроля версий приобрела глобальную популярность по всему миру."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Дополнительный инструменты для Git в виде специализированных интерфейсов (Web, Desktop) и дополнительных сценариев (hooks) дали возможность рядовым разработчикам вносить изменения в единый проект без проблем."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Социальные сети/автоматизированные системы на основе Git (GitHub, GitLab) привлекли миллионы разработчиков, и множество крупных компаний. Данные системы позволяют удобно визуализировать изменения в коде, а также настраивать дополнительные сценарии для своего кода (как то: проверка на соблюдение стандартов кодирование, автоматическое тестирование, автоматическое развертывание приложения на продакшн)."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "html": "log<sup>2</sup> = 100"
      },
      "type": "raw"
    },
    {
      "data": {
        "text": "Гибкая разработка для обычного прикладного программиста становится ясной, понятной и удобной."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Процесс разработки",
        "level": 2
      },
      "type": "header"
    },
    {
      "data": {
        "text": "Процесс разработки для программиста заключается в том чтобы подтянуть себе код который сейчас работает на продакшене. Сделать отдельную ветку, например dev-123456-new-feature"
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Где&nbsp;"
      },
      "type": "paragraph"
    },
    {
      "data": {
        "items": [
          "dev - означает, что эта ветка еще в разработке,&nbsp;",
          "123456 - номер задачи (неважно что используется для постановки задач - главное ID задачи). По ID задачи в таск-менеджере можно видеть подробности.",
          "new-feature - понятное обозначение для программиста, специалиста dev-ops или тим-лида. Потому что не всегда нагляден номер задачи для быстрого понимания, о чем задача."
        ],
        "style": "unordered"
      },
      "type": "list"
    },
    {
      "data": {
        "text": "В данной отдельной ветке программист вносит изменения по своей задаче."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Коммиты (фиксация изменений) помечаются специальным образом, по общепринятому соглашению (см. документ <a href=\"https://www.conventionalcommits.org/ru/v1.0.0-beta.4/\">общепринятые коммиты</a>).&nbsp;"
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Коммиты помеченные по соглашению облегчают работу тим-лида, привносят ясность для команды (что изменилось в коде на данном этапе), и позволяют автоматизировать <a href=\"https://semver.org/lang/ru/\">семантическое версионирование</a>."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Далее после внесения изменений программист создает “запрос на слияние” своей рабочей ветки в рабочую ветку (или тестовую - промежуточный вариант)."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "“Запрос на слияние” (merge request или pull request) - в терминах гит означает одно - разработчик планирует внести изменения которые он выполнил по задаче в тестовый (или рабочий) код. При этом изменения не вступают в силу, пока ответственный за код (самый опытный в команде разработчик, тим-лид) не проверит код на соответствие стандартам компании, задаче, бизнес-логике проекта."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Тим-лид может “слить” ветку или “отклонить” изменения. При этом - вопрос рассмотрения кода (code review) никак не касается ни других разработчиков, ни работы продукта в целом ни его тестового стенда."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Автоматизация",
        "level": 2
      },
      "type": "header"
    },
    {
      "data": {
        "text": "Git предоставляет широкие возможности для автоматизации (хуки). На этом преимуществе построились несколько гигантов индустрии в том числе GitHub и GitLab. Первый - продукт купленный в 2019 году компанией Microsoft, второй - опен-сорс проект поддерживаемый разработчиками со всего мира.&nbsp;"
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Оба продукта предоставляют приблизительно одинаковые возможности для автоматизации и управлению проектами (wiki, task-менеджеры, kanban-доски, и множество дополнительных плагинов).&nbsp;"
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "На “дополнительные плагины” стоит посмотреть подробнее. На данный момент - это гибкие и мощные инструменты помогающие решать разнообразные задачи, например:&nbsp;"
      },
      "type": "paragraph"
    },
    {
      "data": {
        "items": [
          "автоматическое семантическое версионирование на основании общепринятых коммитов (см. этот документ выше)",
          "автоматическое тестирование проекта, покрытого тестами",
          "деплой (разворачивание) проекта на сервере",
          "проверка кода на соответствие стандартам в среде разработчиков данного языка программирования",
          "и многие другие, вплоть до приемочных тестов (например, на основе Selenium)."
        ],
        "style": "unordered"
      },
      "type": "list"
    },
    {
      "data": {
        "text": "Удобство в версионировании",
        "level": 2
      },
      "type": "header"
    },
    {
      "data": {
        "text": "Git позволяет удобно откатывать изменения без проблем на тестовых или продакшен стендах. Откатиться можно вплоть до “фиксации” определенного разработчика или восстановить версию на основе семантического версионирования.&nbsp;"
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Кроме того, каждый разработчик может посмотреть историю изменения каждого отдельного файла за все время существования проекта. Поправить свой или найти “источник проблемы”."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Надежность",
        "level": 2
      },
      "type": "header"
    },
    {
      "data": {
        "text": "Если представить себе обычный workflow разработчика использующего Git, то можно убедиться в том что кодовая база надежно сохраняется в каждой точке изменения."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "items": [
          "код работающий на продакшене может быть привязана к VCS, соответственно хранить “главную” ветку “удаленного репозитория”",
          "удаленный репозиторий хранит всю историю по всем веткам, по всем файлам, как правило этот репозиторий автоматизируется различными плагинами",
          "каждый разработчик хранит у себя локально код с множеством веток, включая “главную” работающую на продакшене."
        ],
        "style": "unordered"
      },
      "type": "list"
    },
    {
      "data": {
        "text": "Таким образом кроме того, что удаленное хранилище хранит историю всего, есть разработчики, у которых хранится локальная история изменений, включая “экспериментальные” версии не включенные в текущий (master) проект."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Удобство в ветвлении",
        "level": 2
      },
      "type": "header"
    },
    {
      "data": {
        "text": "В отличие от Subversion Git позволяет хранить множество веток. Это удобно в случаях, когда программист занимаясь одной задачей и внеся много правок - может просто переключиться на другую задачу (хотфикс например) зафиксировав изменения в текущей ветке. Позже вернуться к этой задаче.&nbsp;"
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Также Git позволяет продолжить работу над задачей любому другому разработчику - надо только знать название ветки, в которой уже внесены изменения (например при увольнении, болезни и т.п.)."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Разные стенды - разные версии",
        "level": 2
      },
      "type": "header"
    },
    {
      "data": {
        "text": "Git позволяет на разных стендах разворачивать разные версии ПО. Например на боевом - будет работать ветка master. На тестовом всегда ветка test. И множество других при необходимости. Для этого достаточно просто переключиться на нужную ветку."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Инструменты разработчика",
        "level": 2
      },
      "type": "header"
    },
    {
      "data": {
        "text": "В данный момент большинство IDE (Visual Studio, Rider и др.) тесно связаны с Git на уровне графического интерфейса, поэтому разработчику не обязательно хранить в уме команды консольного интерфейса."
      },
      "type": "paragraph"
    },
    {
      "data": {
        "text": "Что нужно для миграции",
        "level": 2
      },
      "type": "header"
    },
    {
      "data": {
        "items": [
          "Git предоставляет возможность миграции из Subversion с сохранением всей истории. Для этого необходимо выполнить только одну команду.",
          "Развернутый удаленный репозиторий на одном из серверов. Желательно с интеграцией Gitlab.",
          "Залить мигрированный код в удаленный репозиторий",
          "Каждому программисту клонировать себе код проекта."
        ],
        "style": "unordered"
      },
      "type": "list"
    }
  ],
  "version": "2.19.1"
}